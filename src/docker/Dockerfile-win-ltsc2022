# syntax=docker/dockerfile:1
# check=skip=UndefinedVar,WorkdirRelativePath

FROM mcr.microsoft.com/dotnet/sdk:8.0-windowsservercore-ltsc2022@sha256:a5daa91a8bbf6dbbdfde03490343c3234b356dcbb0740cd33fd1417b34670c38

# Configure local user
USER ContainerAdministrator
SHELL ["cmd", "/S", "/C"]
ENV HOME=C:\\app-root

# Avoid Python cache during build
ENV PYTHONDONTWRITEBYTECODE=1

# Install Powershell, then verify installation
ARG POWERSHELL_VERSION
ENV POWERSHELL_VERSION=${POWERSHELL_VERSION}
RUN curl -LsSf --retry 8 --retry-all-errors "https://github.com/PowerShell/PowerShell/releases/download/v%POWERSHELL_VERSION%/PowerShell-%POWERSHELL_VERSION%-win-x64.msi" -o powershell.msi \
    && msiexec.exe /i powershell.msi /qn /norestart \
    && del /q powershell.msi
RUN pwsh -Version
SHELL ["pwsh", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Install Git, then verify installation
ARG GIT_VERSION
ENV GIT_VERSION=${GIT_VERSION}
RUN curl -LsSf --retry 8 --retry-all-errors "https://github.com/git-for-windows/git/releases/download/v${Env:GIT_VERSION}.windows.1/Git-${Env:GIT_VERSION}-64-bit.exe" -o git.exe \
    && Start-Process git.exe -Wait -ArgumentList '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /NOCANCEL /SP-' \
    && Remove-Item git.exe
RUN git --version

# Install JQ, then verify installation
ARG JQ_VERSION
ENV JQ_VERSION=${JQ_VERSION}
RUN mkdir 'C:\Program Files\jq' \
    && curl -LsSf --retry 8 --retry-all-errors "https://github.com/stedolan/jq/releases/download/jq-${Env:JQ_VERSION}/jq-win64.exe" -o 'C:\Program Files\jq\jq.exe' \
    && [Environment]::SetEnvironmentVariable('Path', $Env:Path + ';C:\Program Files\jq', [EnvironmentVariableTarget]::Machine)
# hadolint ignore=DL3059
RUN jq --version

# Install Python, then verify installation
# TODO: Clean up "__pycache__" folders on disk
ARG PYTHON_VERSION_MAJOR_MINOR
ARG PYTHON_VERSION_PATCH
ENV PYTHON_VERSION=${PYTHON_VERSION_MAJOR_MINOR}.${PYTHON_VERSION_PATCH}
RUN curl -LsSf --retry 8 --retry-all-errors "https://python.org/ftp/python/${Env:PYTHON_VERSION}/python-${Env:PYTHON_VERSION}-amd64.exe" -o python.exe \
    && Start-Process python.exe -Wait -ArgumentList '/quiet InstallAllUsers=1 PrependPath=1 Include_test=0' \
    && Remove-Item python.exe

# Install Python build tools
# TODO: Clean up "__pycache__" folders on disk
RUN python --version \
    && python -m pip \
        --disable-pip-version-check \
        --no-cache-dir \
        --quiet \
        --retries 8 \
        --timeout 120 \
        install \
            --upgrade \
            pip setuptools wheel

# Install Azure CLI, then verify installation
# TODO: Clean up "__pycache__" folders on disk
ARG AZURE_CLI_VERSION
ENV AZURE_CLI_VERSION=${AZURE_CLI_VERSION}
RUN python -m pip \
        --disable-pip-version-check \
        --no-cache-dir \
        --quiet \
        --retries 8 \
        --timeout 120 \
        install \
            "azure-cli==${Env:AZURE_CLI_VERSION}" \
    && az version

# Install AWS CLI, then verify installation
ARG AWS_CLI_VERSION
ENV AWS_CLI_VERSION=${AWS_CLI_VERSION}
RUN curl -LsSf --retry 8 --retry-all-errors "https://awscli.amazonaws.com/AWSCLIV2-${Env:AWS_CLI_VERSION}.msi" -o awscli.msi \
    && Start-Process msiexec.exe -Wait -ArgumentList '/I awscli.msi /qn /norestart' \
    && Remove-Item awscli.msi
RUN aws --version

# Install Google Cloud CLI, then verify installation
ARG GCLOUD_CLI_VERSION
ENV GCLOUD_CLI_VERSION=${GCLOUD_CLI_VERSION}
RUN curl -LsSf --retry 8 --retry-all-errors "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${Env:GCLOUD_CLI_VERSION}-windows-x86_64.zip" -o gcloud.zip \
    && Expand-Archive -Force gcloud.zip -DestinationPath 'C:\Program Files' \
    && Remove-Item gcloud.zip \
    && Rename-Item 'C:\Program Files\google-cloud-sdk' 'gcloud' \
    && Start-Process cmd.exe -Wait -ArgumentList '/c ''C:\Program Files\gcloud\install.bat'' --additional-components beta --quiet' \
    && [Environment]::SetEnvironmentVariable('Path', $Env:Path + ';C:\Program Files\gcloud\bin', [EnvironmentVariableTarget]::Machine)
RUN gcloud version

# Install YQ, then verify installation
ARG YQ_VERSION
ENV YQ_VERSION=${YQ_VERSION}
RUN mkdir 'C:\Program Files\yq' \
    && curl -LsSf --retry 8 --retry-all-errors "https://github.com/mikefarah/yq/releases/download/v${Env:YQ_VERSION}/yq_windows_amd64.exe" -o 'C:\Program Files\yq\yq.exe' \
    && [Environment]::SetEnvironmentVariable('Path', $Env:Path + ';C:\Program Files\yq', [EnvironmentVariableTarget]::Machine)
# hadolint ignore=DL3059
RUN yq --version

# Install Azure Pipelines Agent sources, then verify installation
ARG AZP_AGENT_VERSION
ENV AZP_AGENT_VERSION=${AZP_AGENT_VERSION}
ENV AZP_HOME=${HOME}\\azp-agent
# Disable agent auto-updates
# See: https://github.com/microsoft/azure-pipelines-agent/blob/b5ff4408239f3e938560f8b2e3848df76489a8d0/src/Agent.Listener/Agent.cs#L354C24-L354C24
ENV agent.disableupdate="1"
RUN mkdir $Env:AZP_HOME \
    && curl -LsSf --retry 8 --retry-all-errors "https://download.agent.dev.azure.com/agent/${Env:AZP_AGENT_VERSION}/pipelines-agent-win-x64-${Env:AZP_AGENT_VERSION}.zip" -o azp-agent.zip \
    && Expand-Archive -Force azp-agent.zip -DestinationPath $Env:AZP_HOME \
    && Remove-Item azp-agent.zip \
    && & "${Env:AZP_HOME}\run.cmd" --version
ENV AZP_WORK=${HOME}\\azp-work

# Install zstd, then verify installation
ARG ZSTD_VERSION
ENV ZSTD_VERSION=${ZSTD_VERSION}
RUN curl -LsSf --retry 8 --retry-all-errors "https://github.com/facebook/zstd/releases/download/v${Env:ZSTD_VERSION}/zstd-v${Env:ZSTD_VERSION}-win64.zip" -o zstd.zip \
    && Expand-Archive -Force zstd.zip -DestinationPath 'C:\Program Files' \
    && Remove-Item zstd.zip \
    && Rename-Item "C:\Program` Files\zstd-v${Env:ZSTD_VERSION}-win64" 'zstd' \
    && [Environment]::SetEnvironmentVariable('Path', $Env:Path + ';C:\Program Files\zstd', [EnvironmentVariableTarget]::Machine)
# hadolint ignore=DL3059
RUN zstd --version

# Install Visual Studio Build Tools, then verify installation
# See: https://learn.microsoft.com/en-us/visualstudio/install/build-tools-container?view=vs-2022#create-and-build-the-dockerfile
ARG VS_BUILDTOOLS_VERSION
ENV VS_BUILDTOOLS_VERSION=${VS_BUILDTOOLS_VERSION}
# TODO: Delete the installer, but it's seems locked, receiving "Remove-Item: Access to the path 'C:\buildtools.exe' is denied."
RUN curl -LsSf --retry 8 --retry-all-errors "https://download.visualstudio.microsoft.com/download/pr/${Env:VS_BUILDTOOLS_VERSION}/vs_BuildTools.exe" -o buildtools.exe \
    && .\buildtools.exe \
        --installPath 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools' \
        --nocache \
        --norestart \
        --quiet \
        --wait \
        # https://learn.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2022#azure-development-build-tools
        --add Microsoft.VisualStudio.Workload.AzureBuildTools \
        # https://learn.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2022#desktop-development-with-c
        --add Microsoft.VisualStudio.Workload.VCTools \
        # https://learn.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2022#web-development-build-tools
        --add Microsoft.VisualStudio.Workload.WebBuildTools \
        # https://learn.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2022#net-desktop-build-tools
        --add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools \
        # https://learn.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2022#officesharepoint-build-tools
        --add Microsoft.VisualStudio.Workload.OfficeBuildTools
RUN Start-Process cmd.exe -Wait -ArgumentList '/c ''C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat'' && msbuild --version'

# Define path for the custom SSL certificate
ENV AZP_CUSTOM_CERT_PEM=${HOME}\\azp-custom-certs

# Reset Python configs to default
ENV PYTHONDONTWRITEBYTECODE=

# Install Azure Pipelines Agent startup script
WORKDIR ${AZP_HOME}
COPY start.ps1 .
# Escaping antislash, containerd is bugged
# See: https://github.com/containerd/containerd/issues/6300#issuecomment-988048374
CMD ["pwsh", ".\\start.ps1"]
