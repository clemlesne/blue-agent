# syntax=docker/dockerfile:1
# check=skip=UndefinedVar

FROM registry.access.redhat.com/ubi8/ubi-minimal:8.10@sha256:cf095e5668919ba1b4ace3888107684ad9d587b1830d3eb56973e6a54f456e67 AS base

# Configure local user
ENV USER=root
ENV HOME=/app-root

# Avoid Python cache during build
ENV PYTHONDONTWRITEBYTECODE=1

# Install:
# - ASP.NET Core runtime
# - Azure CLI system requirements (C/Rust build tools for libs non pre-built on this platform)
# - Azure Pipelines agent system requirements
# - fuse-overlayfs, iptables, shadow-utils, for BuildKit
# - gzip, make, tar, unzip, wget, zip, zstd, dnsutils, rsync, for developer ease-of-life
# - zsh, for inter-operability
RUN --mount=target=/var/cache/yum,type=cache,id=yum-${TARGETPLATFORM},sharing=locked \
    microdnf install -y --nodocs --setopt=install_weak_deps=0 \
        aspnetcore-runtime-8.0 \
        bind-utils \
        ca-certificates \
        cargo \
        curl \
        findutils \
        fuse-overlayfs \
        gcc \
        gcc-c++ \
        git-core \
        git-lfs \
        gnupg \
        gzip \
        hostname \
        iptables \
        iputils \
        jq \
        make \
        openssl \
        openssl-devel \
        pkg-config \
        rsync \
        shadow-utils \
        sudo \
        tar \
        unzip \
        wget \
        zip \
        zsh \
        zstd \
    && find / -depth -type d -name __pycache__ -exec rm -rf {} \; 2> /dev/null

# Copy helper script, then verify installation
COPY arch.sh .
RUN chmod +x arch.sh \
    && bash arch.sh

# Persist Python version
ARG PYTHON_VERSION_MAJOR_MINOR
ARG PYTHON_VERSION_PATCH
ENV PYTHON_VERSION=${PYTHON_VERSION_MAJOR_MINOR}.${PYTHON_VERSION_PATCH}

FROM base AS rootlesskit

# Install Go, then verify installation
ARG GO_VERSION
ENV GO_VERSION=${GO_VERSION}
RUN rm -rf /usr/local/go \
    && curl -LsSf --retry 8 https://go.dev/dl/go${GO_VERSION}.linux-$(ARCH_X64=amd64 bash arch.sh).tar.gz | tar -xz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"
RUN go version

# Install RootlessKit, then verify installation
ARG ROOTLESSKIT_VERSION
ENV ROOTLESSKIT_VERSION=${ROOTLESSKIT_VERSION}
RUN --mount=target=/rootlesskit-${ROOTLESSKIT_VERSION},type=cache,id=rootlesskit-${ROOTLESSKIT_VERSION}-${TARGETPLATFORM},sharing=locked \
    git clone --depth 1 --branch v${ROOTLESSKIT_VERSION} https://github.com/rootless-containers/rootlesskit.git rootlesskit \
    # Ugly but that's work
    && cp -r rootlesskit/* rootlesskit-${ROOTLESSKIT_VERSION} \
    && rm -rf rootlesskit \
    && cd rootlesskit-${ROOTLESSKIT_VERSION} \
    && make \
    && make install \
    && cd .. \
    && rootlesskit --version \
    && rootlessctl --version

FROM base AS python

# Build Python from source, then verify installation
ARG PYTHON_VERSION
ENV PYTHON_VERSION=${PYTHON_VERSION}
RUN --mount=target=/var/cache/yum,type=cache,id=yum-${TARGETPLATFORM},sharing=locked --mount=target=/Python-${PYTHON_VERSION},type=cache,id=python-${PYTHON_VERSION}-${TARGETPLATFORM},sharing=locked \
    microdnf install -y --nodocs --setopt=install_weak_deps=0 \
        bzip2 \
        bzip2-devel \
        expat \
        expat-devel \
        gdb \
        gdbm-libs \
        glibc-devel \
        libffi-devel \
        libstdc++-devel \
        libuuid-devel \
        libxml2-devel \
        mpdecimal \
        ncurses-devel \
        redhat-rpm-config \
        sqlite \
        sqlite-devel \
        sqlite-libs \
        xz-devel \
        xz-libs \
        zlib-devel \
    && curl -LsSf --retry 8 https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz -o python.tgz \
    && tar -xzf python.tgz \
    && rm python.tgz \
    && cd Python-${PYTHON_VERSION} \
    && gnu_arch="$(rpm --eval '%{_target_cpu}')-redhat-linux" \
    && ./configure \
        --build=$gnu_arch \
        --enable-optimizations \
        --with-ensurepip=install \
        --with-lto \
    && make profile-removal \
    && extra_cflags="$(rpm --eval '%{optflags}')" \
    && ldflags="$(rpm --eval '%{__global_ldflags}')" \
    && make -j $(nproc) "EXTRA_CFLAGS=${extra_cflags:-}" "LDFLAGS=${ldflags:-}" \
    && make install \
    && cd .. \
    && python3 --version \
    && python3 -m pip --version \
    && find / -depth -type d -name __pycache__ -exec rm -rf {} \; 2> /dev/null

FROM base

# Install Python, then verify installation
COPY --from=python /usr/local/bin/python${PYTHON_VERSION_MAJOR_MINOR} /usr/local/bin/python${PYTHON_VERSION_MAJOR_MINOR}
COPY --from=python /usr/local/lib/python${PYTHON_VERSION_MAJOR_MINOR} /usr/local/lib/python${PYTHON_VERSION_MAJOR_MINOR}
RUN ln -s /usr/local/bin/python${PYTHON_VERSION_MAJOR_MINOR} /usr/local/bin/python3 \
    && ln -s /usr/local/bin/python${PYTHON_VERSION_MAJOR_MINOR} /usr/local/bin/python \
    && python --version \
    && python3 --version \
    && python${PYTHON_VERSION_MAJOR_MINOR} --version \
    && python3 -m pip --version

# Install Python build tools
RUN --mount=target=/${USER}/.cache/pip,type=cache,id=pip-${PYTHON_VERSION_MAJOR_MINOR}-${TARGETPLATFORM},sharing=locked \
    python3 -m pip \
        --disable-pip-version-check \
        --quiet \
        --retries 8 \
        --timeout 120 \
        install \
            --upgrade \
            pip setuptools wheel \
    && find / -depth -type d -name __pycache__ -exec rm -rf {} \; 2> /dev/null

# Install Azure CLI, then verify installation
ARG AZURE_CLI_VERSION
ENV AZURE_CLI_VERSION=${AZURE_CLI_VERSION}
RUN --mount=target=/${USER}/.cache/pip,type=cache,id=pip-${PYTHON_VERSION_MAJOR_MINOR}-${TARGETPLATFORM},sharing=locked \
    python3 -m pip \
        --disable-pip-version-check \
        --quiet \
        --retries 8 \
        --timeout 120 \
        install \
            azure-cli==${AZURE_CLI_VERSION} \
    && az version \
    && rm -rf ${HOME}/.azure ${HOME}/.cache/pip \
    && find / -depth -type d -name __pycache__ -exec rm -rf {} \; 2> /dev/null

# Install AWS CLI, then verify installation
ARG AWS_CLI_VERSION
ENV AWS_CLI_VERSION=${AWS_CLI_VERSION}
RUN curl -LsSf --retry 8 https://awscli.amazonaws.com/awscli-exe-linux-$(ARCH_X64=x86_64 ARCH_ARM64=aarch64 bash arch.sh)-${AWS_CLI_VERSION}.zip -o awscli.zip \
    && unzip -q awscli.zip \
    && ./aws/install \
    && rm -rf awscli.zip aws \
    && aws --version

# Install Google Cloud CLI, then verify installation
ARG GCLOUD_CLI_VERSION
ENV GCLOUD_CLI_VERSION=${GCLOUD_CLI_VERSION}
RUN curl -LsSf --retry 8 https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-${GCLOUD_CLI_VERSION}-linux-$(ARCH_X64=x86_64 ARCH_ARM64=arm bash arch.sh).tar.gz | tar -xz -C /usr/local \
    && /usr/local/google-cloud-sdk/install.sh \
        --additional-components beta \
        --quiet \
    && ln -s /usr/local/google-cloud-sdk/bin/gcloud /usr/bin/gcloud \
    && ln -s /usr/local/google-cloud-sdk/bin/gsutil /usr/bin/gsutil \
    && gcloud version \
    && rm -rf /usr/local/google-cloud-sdk/.install ${HOME}/.config/gcloud \
    && find / -depth -type d -name __pycache__ -exec rm -rf {} \; 2> /dev/null

# Install Powershell, then verify installation
ARG POWERSHELL_VERSION
ENV POWERSHELL_VERSION=${POWERSHELL_VERSION}
RUN mkdir -p /opt/microsoft/powershell \
    && curl -LsSf --retry 8 https://github.com/PowerShell/PowerShell/releases/download/v${POWERSHELL_VERSION}/powershell-${POWERSHELL_VERSION}-linux-$(bash arch.sh).tar.gz | tar -xz -C /opt/microsoft/powershell \
    && chmod +x /opt/microsoft/powershell/pwsh \
    && ln -s /opt/microsoft/powershell/pwsh /usr/bin/pwsh \
    && pwsh -Version \
    && rm -rf ${HOME}/.config/powershell ${HOME}/.cache/powershell

# Install YQ, then verify installation
ARG YQ_VERSION
ENV YQ_VERSION=${YQ_VERSION}
RUN curl -LsSf --retry 8 https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_$(ARCH_X64=amd64 bash arch.sh) -o /usr/bin/yq \
    && chmod +x /usr/bin/yq \
    && yq --version

# Install Tini, then verify installation
ARG TINI_VERSION
ENV TINI_VERSION=${TINI_VERSION}
RUN curl -LsSf --retry 8 https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$(ARCH_X64=amd64 bash arch.sh) -o /tini \
    && chmod +x /tini \
    && /tini --version
ENTRYPOINT ["/tini", "--"]

# Install BuildKit, then verify installation
ARG BUILDKIT_VERSION
ENV BUILDKIT_VERSION=${BUILDKIT_VERSION}
RUN mkdir buildkit \
    && curl -LsSf --retry 8 https://github.com/moby/buildkit/releases/download/v${BUILDKIT_VERSION}/buildkit-v${BUILDKIT_VERSION}.linux-$(ARCH_X64=amd64 bash arch.sh).tar.gz | tar -xz -C buildkit \
    && mv buildkit/bin/* /usr/local/bin \
    && rm -rf buildkit \
    && buildctl --version \
    && buildkitd --version

# Install RootlessKit, then verify installation
COPY --from=rootlesskit /usr/local/bin/rootless* /usr/bin/
RUN rootlesskit --version \
    && rootlessctl --version

# Install Azure Pipelines Agent sources, then verify installation
ARG AZP_AGENT_VERSION
ENV AZP_AGENT_VERSION=${AZP_AGENT_VERSION}
ENV AZP_HOME=${HOME}/azp-agent
# Disable agent auto-updates
# See: https://github.com/microsoft/azure-pipelines-agent/blob/b5ff4408239f3e938560f8b2e3848df76489a8d0/src/Agent.Listener/Agent.cs#L354C24-L354C24
ENV agent.disableupdate="1"
RUN mkdir -p ${AZP_HOME} \
    && curl -LsSf --retry 8 https://vstsagentpackage.azureedge.net/agent/${AZP_AGENT_VERSION}/pipelines-agent-linux-$(bash arch.sh)-${AZP_AGENT_VERSION}.tar.gz | tar -xz -C ${AZP_HOME} \
    && cd ${AZP_HOME} \
    && chmod +x run-docker.sh config.sh \
    && AGENT_ALLOW_RUNASROOT="1" bash run-docker.sh --version \
    && rm -rf _diag \
    # Allow local user to R/W to agent home
    && chmod -R a+w .
ENV AZP_WORK=${HOME}/azp-work
ENV AZP_CUSTOM_CERT_PEM=${HOME}/azp-custom-certs

# Cleanup helper script
RUN rm arch.sh

# Reset Python configs to default
ENV PYTHONDONTWRITEBYTECODE=

# Configure local user
RUN mkdir -p /run/user/0 ${HOME}/.local/tmp ${HOME}/.local/share/buildkit \
    && chown -R ${USER} /run/user/0 ${HOME} \
    && echo ${USER}:100000:65536 | tee /etc/subuid | tee /etc/subgid
USER 0:0
ENV XDG_RUNTIME_DIR=/run/user/0
ENV TMPDIR=${HOME}/.local/tmp
ENV BUILDKIT_HOST=unix:///run/user/0/buildkit/buildkitd.sock

# Install Azure Pipelines Agent startup script
WORKDIR ${AZP_HOME}
COPY start.sh .
# Run as exec form, so that it can receive signals from Tini
CMD ["bash", "start.sh"]
